name: Build and Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Install Node.js v18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Expose yarn config as "$GITHUB_OUTPUT"
        id: yarn-config
        shell: bash
        run: |
         echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-download-cache
        with:
          path: ${{ steps.yarn-config.outputs.CACHE_FOLDER}}
          key: yarn-download-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-download-cache-
        
      - name: Restore yarn install state
        id: yarn-install-state-cache
        uses: actions/cache@v3
        with:
          path: .yarn/ci-cache/
          key: ${{ runner.os }}-yarn-install-state-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
        
      - name: Install dependencies
        shell: bash
        run: |
            yarn install --immutable --inline-builds

      - name: Build
        run: yarn build
      
      - name: Publish to Build branch
        run: |
          echo "Publishing to build branch"
          set -e

          echo -e "\n# Initialize some useful variables"
          GITHUB_ACTOR=${{ github.actor }}
          GITHUB_REPOSITORY=${{ github.repository }}
          GITHUB_SHA=${{ github.sha }}
          GITHUB_REF=${{ github.ref }}
          GITHUB_EMAIL="anish.shobith19@gmail.com"

          REPO="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          echo -e "\n# Checkout the repository on the target branch"
          TARGET_BRANCH="build"
          git clone $REPO out

          # Check if the target branch exists locally
          if ! git show-ref --quiet refs/heads/$TARGET_BRANCH; then
            # If the target branch doesn't exist, create and switch to it
            cd out
            git checkout -b $TARGET_BRANCH
            git rm -rf .
            cd ..
          else
            # If the target branch exists, just switch to it
            cd out
            git checkout $TARGET_BRANCH
            cd ..
          fi

          echo -e "\n# Remove any old files in the dist folder"
          rm -rfv out/dist/*

          echo -e "\n# Move the generated docs to the newly-checked-out repo, to be committed and pushed"
          rsync -vaI package.json out/
          rsync -vaI README.md out/
          rsync -vaI LICENSE out/
          rsync -vaI dist/ out/dist/

          echo -e "\n# Commit and push"
          cd out
          git add .
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_EMAIL}"
          git commit -m "build: tsc build for ${GITHUB_SHA}" || true
          git push origin $TARGET_BRANCH
      
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
